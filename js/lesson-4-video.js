// Модуль 4
// ****************************************************************************************

// Примеры из видео

// ========================================================================================
// Стрелочные функции
// ========================================================================================
// ----------------------------------------------------------------------------------------
// Обычное объявление функции через функциональное выражение
// ----------------------------------------------------------------------------------------
let add = function (a, b) {
    return a + b;
};
console.log(add(2, 3));  // 5

// ----------------------------------------------------------------------------------------
// Объявление стрелочной функции с несколькими параметрами
// ----------------------------------------------------------------------------------------
add = (a, b) => {
    return a + b;
}
console.log(add(2, 3));     // 5

// ----------------------------------------------------------------------------------------
// Объявление стрелочной функции с одним параметром - без круглых скобок
// ----------------------------------------------------------------------------------------
let logMessage = message => {
    console.log(message);
}
logMessage('Привет !');         // Привет !
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Объявление стрелочной функции без параметров - пустые круглые скобки
// ----------------------------------------------------------------------------------------
let greet = () => {
    console.log('Привет !!!')
}
greet()                         // Привет !!!
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Явный и неявный возврат
// ----------------------------------------------------------------------------------------
// Явный возврат - когда в теле функции явно указаны - оператор return и что возвращать
// ----------------------------------------------------------------------------------------
// СИНТАКСИС :
add = function (a, b) {
    return a + b;
};
console.log(add(2, 3));     // 5

// ----------------------------------------------------------------------------------------
// Неявный возврат - когда в теле функции нет никаких действий, кроме возврата значения выражения
// Не указываются фигурные скобки, а после стрелки ставится только выражение, результат
// которого необходимо вернуть.
// Оператор return не объявлен явно или нет фигурных скобок тела функции - поэтому неявный возврат
// ----------------------------------------------------------------------------------------
// СИНТАКСИС :
add = (a, b) => a + b;
console.log(add(2, 3));     // 5

// ----------------------------------------------------------------------------------------
// Нет псевдомассива arguments
// ----------------------------------------------------------------------------------------
// Если нужно передать неизвестное количество аргументов - используем три точки ... (rest)
add = (...args) => {
    console.log('Аргументы = ', args);  // [1, 2, 3, 4, 5] - массив переданных аргументов
}
add(1, 2, 3, 4, 5);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Контекст стрелочной функции
// ========================================================================================
// У стрелочной функции НЕТ ключевого слова  this.
// Контекст внутри стрелки определяется местом ее объявления, а не вызова,
// и ссылается на контекст родительской функции
// ----------------------------------------------------------------------------------------
// Пример. this в методе объекта и в стрелочной функции метода объекта
let user = {
    fullName: "Пользователь",
    showName() { 
        console.log('this in showName', this); // {fullName: 'Пользователь', showName: ƒ}
        console.log('this.fullName in showName', this.fullName); // Пользователь
        let inner = () => {
            console.log('this in inner', this); // {fullName: 'Пользователь', showName: ƒ}
        }
        inner();
    }, 
}

user.showName();

// ----------------------------------------------------------------------------------------
// ВАЖНО !! НИКОГДА не использовать стрелки как метод объекта !
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Конструктор обычный - не может быть стрелочной функцией !!
// ========================================================================================
const UserMy = function (name) {
    this.name = name;
}
console.log(new UserMy('Яблоко'));
// ----------------------------------------------------------------------------------------


// ****************************************************************************************
// Перебирающие методы массивов
// ****************************************************************************************
// Большинство методов НЕ изменяют оригинальный масив
// Все методы массива – перебирают массив поэлементно
// Функция, которая находится в методе – вызывается для КАЖДОГО элемента перебираемого массива


// ========================================================================================
// Метод forEach()
// ========================================================================================
// Перебирает оригинальный массив
// Не изменяет оригинальный массив
// Просто замена цикла for ... of. Ничего не возвращает.
// ----------------------------------------------------------------------------------------
let numbers = [5, 10, 15, 20, 25];
numbers.forEach(function (number, index, array) {
    console.log(index, number); // Выводит построчно индекс и значение элемента массива
    // Можно изменить значение элемента массива (например по индексу 1)
    // Обычно такое редко применяется
    if (index === 1) { array[index] = 20; }
});
console.log(numbers); // [5, 20, 15, 20, 25]
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод map()
// ========================================================================================
// Перебирает оригинальный массив
// Не изменяет оригинальный массив
// Возвращает новый массив ТОЛЬКО такой-же длины, как и исходный массив
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Пример. Создаем новый массив из numbers, у которого значения увеличены в 2 раза
// ----------------------------------------------------------------------------------------
numbers = [5, 10, 15, 20, 25];
let doubleNums = numbers.map(function (number) {
    return number * 2;
});
console.log('numbers - ', numbers);         // [5, 10, 15, 20, 25]
console.log('doubleNums - ', doubleNums);   // [10, 20, 30, 40, 50]
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// С помощью map() можно перебирать и массив объектов. И создавать новые массивы,
// используя некоторые свойства объектов.
// ----------------------------------------------------------------------------------------
// Пример. Есть массив игроков
// ----------------------------------------------------------------------------------------
let players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
]
// ----------------------------------------------------------------------------------------
// Задача. Создать массив имен игроков. Используем синтаксис обычной функции
// ----------------------------------------------------------------------------------------
let playersName = players.map(function (player) {
    // Выводится текущий элемент массива - объект
    console.log(player);
    // В новый массив из текущего объекта записываем только свойство name 
    return player.name;
});
console.log(playersName); //    ['Вася', 'Петя', 'Саша', 'Кузя', 'Миша']

// ----------------------------------------------------------------------------------------
// Задача. Создать массив id игроков.  Использую синтаксис - стрелочную функцию
// ----------------------------------------------------------------------------------------
let playersId = players.map(player => player.id);
console.log(playersId); // ['player-1', 'player-2', 'player-3', 'player-4', 'player-5']

// ----------------------------------------------------------------------------------------
// Задача. Создать массив из имени игрока и его результата
// ----------------------------------------------------------------------------------------
let res = players.map(player => {
    return {
        namePlayer: player.name,
        score: player.points,
    }
})
console.table(res); // Новый массив объектов с новыми названиями двух свойств

// ----------------------------------------------------------------------------------------
// Та же самая запись через деструктуризацию и выделение возвращаемого объекта круглыми скобками
// ----------------------------------------------------------------------------------------
res = players.map(({ name, points }) => ({
    namePlayer: name,
    score: points,
}));
console.table(res); // Новый массив объектов с новыми названиями двух свойств

// ----------------------------------------------------------------------------------------
// Задача. Создать новый массив с теми же свойствами, но увеличенными в 2 раза points
// ----------------------------------------------------------------------------------------
let updatePlayers = players.map(player => {
    return {
        // Распыляем свойства старого объекта, создавая новый объект с такими же свойствами
        ...player,
        // Значение points увеличиваем в 2 раза
        points: player.points * 2,
    }
});
console.table(updatePlayers); // Новый массив объектов

// ----------------------------------------------------------------------------------------
// Задача. Создать новый массив и для игрока 'player-3' изменить игровое время
// ----------------------------------------------------------------------------------------
// Переменная с Id игрока, которому нужно изменить игровое время
let playerIdToUpdate = 'player-3';
let playersUpdateTime = players.map(player => { 
    // --------------------------------------------------------------------------------------
    // Мой вариант 
    // return {
    //     ...player,
    //     // Для искомого игрока увеличиваем время на 100
    //     // Использую тернарный оператор
    //     timePlayed: (player.id === playerIdToUpdate) ? player.timePlayed + 100 : player.timePlayed,
    // };
    // --------------------------------------------------------------------------------------
    // Вариант Репеты №1
    // if (player.id === playerIdToUpdate) {
    //     return {
    //         ...player,
    //         timePlayed: player.timePlayed + 100,
    //     }
    // };
    // return player;
    // --------------------------------------------------------------------------------------
    // Вариант Репеты №2
    // --------------------------------------------------------------------------------------
    return (player.id === playerIdToUpdate)
        ? { ...player, timePlayed: player.timePlayed + 100 }
        : player ;
});
console.table(playersUpdateTime);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод filter()
// ========================================================================================
// Перебирает оригинальный массив
// Оригинальный массива не изменяется
// Возвращает новый массив (с элементами или пустой)
// Добавляет в возвращаемый массив элементы, для который условие колбек-функции будет true
// НЕ добавляет в возвращаемый массив элементы, для который условие колбек-функции будет false
// Если ни один элемент не удовлетворяет условию - возвращается пустой массив
// Условие может быть любой сложности (с применением логических операторов &&, || , ! )
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Пример 1.
// Отфильтровать массив чисел ( по условию сравнения чисел )
// ----------------------------------------------------------------------------------------
numbers = [5, 10, 15, 20, 25];
let filteredNumbers = numbers.filter(number => {
    // В массив добавляются только числа, которые больше 10
    return number > 10;
})
console.log('filteredNumbers', filteredNumbers);    // [15, 20, 25]
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР 2.
// 2-1. Из списка игроков выбрать только тех, кто в сети (online = true)
// ----------------------------------------------------------------------------------------
players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
]
let playersOnline = players.filter(function(player) {
    return player.online === true;
})
// Краткая запись стрелочной функцией
// Так как в player.online уже хранится булевое значение, можно не сравнивать с true/false
// let playersOnline = players.filter(player => player.online );
console.log('Игроки в сети ', playersOnline);

// ----------------------------------------------------------------------------------------
// 2-2. Из списка игроков выбрать только тех, кто в НЕ сети (online = false)
// ----------------------------------------------------------------------------------------
// Применяем логическое НЕ - знак вопроса - получаем инверсию условия
let playersOffline = players.filter(player => ! player.online );
console.log('Игроки НЕ в сети ', playersOffline);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// 2-3. Из списка игроков выбрать только тех, кто играет больше 250 часов (timePlayed)
// ----------------------------------------------------------------------------------------
let playersTimeBig = players.filter(player => {
    return player.timePlayed > 250;
})
console.log('Больше всего играют ', playersTimeBig);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод find() 
// ========================================================================================
// Перебирает оригинальный массив
// Оригинальный массива не изменяется
// Возвращает первый элемент, удовлетворяющий условию или undefined.
// После нахождения первого подходящего элемента - дальнейший поиск прекращается.
// Обычно проверяется на равенство при поиске элементов по уникальным свойствам
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР 1.1. Поиск элемента, значение которого больше 10
// ----------------------------------------------------------------------------------------
numbers = [5, 10, 15, 20, 25];
let findNumberBig = numbers.find(number => number > 10);
console.log('findNumberBig', findNumberBig);     // 15
// Возвращает только один элемент (первый, удовлетворяющий условию)
// ----------------------------------------------------------------------------------------
// ПРИМЕР 1.2. Поиск элемента, значение которого = 10
// ----------------------------------------------------------------------------------------
let findNumber = numbers.find(number => number === 10);
console.log('findNumber', findNumber);     // 10
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР 2.1. Поиск игрока, у которого id="player-3"
// ----------------------------------------------------------------------------------------
players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
]

const playerIdToFind = 'player-3';
let playersFindId = players.find(player => player.id === playerIdToFind);
console.table('playersFindId', playersFindId); // Возвращает объект
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР 2.2. Функция для поиска игрока по id
// ----------------------------------------------------------------------------------------
// Создание функции для поиска по Id
const findPlayerById = function (allPlayers, playerId) {
    return allPlayers.find(player => player.id === playerId);
}
// Вызов функции поиска и запись результата поиска в переменную
let findPlayer4 = findPlayerById(players, 'player-4');
console.log('findPlayer4', findPlayer4);
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Метод every()
// ========================================================================================
// Перебирает оригинальный массив
// Оригинальный массива не изменяется
// Возвращает true, если ВСЕ элементы массива удовлетворяют условию.
// После нахождения первого НЕ подходящего элемента - дальнейший поиск прекращается,
// и возвращается false.
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Проверить все ли игноки в сети (online)
// ----------------------------------------------------------------------------------------
players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
]

const isAllOnline = players.every(player => player.online);
console.log('Все ли игроки в сети ? - ', isAllOnline);   // false
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод some()
// ========================================================================================
// Перебирает оригинальный массив
// Оригинальный массива не изменяется
// Возвращает true, если ХОТЯ БЫ один элемент массива удовлетворяет условию.
// Возвращает false, если НИ один элемент массива НЕ удовлетворяет условию.
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// ПРИМЕР. Проверить есть ли хотя бы один из игноков в сети (online)
// ----------------------------------------------------------------------------------------
const isAnyOnline = players.some(player => player.online);
console.log('Есть ли хоть кто-то в сети ? - ', isAnyOnline);   // true
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод reduce()
// ========================================================================================
// Перебирает оригинальный массив
// Оригинальный массива не изменяется
// Возвращает всё, что угодно.
// Уникальный швейцарский нож работы с коллекцией - берет много и делает из него что-то одно
// ----------------------------------------------------------------------------------------
// Используется такое понятие, как аккумулятор - то, что передается в функцию
// на следующей итерации.
// Вторым параметром метода является стартовое значение аккумулятора.
// На каждой итерации меняется значение аккумулятора - через  return
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Расчет суммы всех элементов массива
// ----------------------------------------------------------------------------------------
numbers = [5, 10, 15, 20, 25];

let accumStart = 0;

let total = numbers.reduce(function (accum, number) { 
    console.log('Аккумулятор -', accum);
    console.log('Число из массива - ', number);
    return accum + number;
}, accumStart);

// Вывод из функции :
// Аккумулятор - 0   Число из массива -  5      return  0 + 5
// Аккумулятор - 5   Число из массива -  10     return  5 + 10
// Аккумулятор - 15  Число из массива -  15     return  15 + 15
// Аккумулятор - 30  Число из массива -  20     return  30 + 20
// Аккумулятор - 50  Число из массива -  25     return  50 + 25

console.log('ВСЕГО - ',total); // Возвращает последнее значение аккумулятора
// ВСЕГО -  75
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Посчитать общую сумму зарплату из объекта разными названиями свойств
// ----------------------------------------------------------------------------------------
let salary = {
    alex: 100,
    tan: 50,
    gena: 30,
};
// let valuesSalary = Object.values(salary); // Массив всех значений - [100,50,30]
// let totalSalary = valuesSalary.reduce(function (total, values) {
//     return total + values;
// }, 0);
// console.log('valuesSalary - ',valuesSalary)     // [100,50,30]

// Короткая запись через цепочку вызовов и стрелочную функцию
let totalSalary = Object.values(salary).reduce((total, value) => total + value, 0);

console.log('totalSalary - ',totalSalary)       // 180
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Посчитать общую сумму часов всех игроков из массива объектов
// ----------------------------------------------------------------------------------------
players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
];

// player - это элемент массива players.
// Из него по свойству "выдергиваем" значение timePlayed
let allTimes = players.reduce(function (totalTime, player) {
    return totalTime + player.timePlayed;
}, 0);
console.log('Общее время у всех игроков - ',allTimes);  // 1180

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Посчитать общую сумму за товар в корзине
// ----------------------------------------------------------------------------------------
let cart = [
    { label: 'Колбаса', price: 200, quantity: 1 },
    { label: 'Сыр', price: 250, quantity: 2 },
    { label: 'Хлеб', price: 20, quantity: 1 },
];

// Полная запись - через колбек-функцию
// ----------------------------------------------------------------------------------------
// let totalAmount = cart.reduce(function (totalCart, item) {
//     return totalCart + item.price * item.quantity;
// }, 0);

// Краткая запись - через деструктуризацию свойств и стрелочную функцию
// ----------------------------------------------------------------------------------------
let totalAmount = cart.reduce((totalCart, { price, quantity }) => totalCart + price * quantity, 0);

console.log('Общая стоимость товаров в корзине - ', totalAmount);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. Собираем все теги из твитов.
// ----------------------------------------------------------------------------------------
let tweets = [
    { id: 1, likes: 5, tags: ['js', 'nodejs'] },
    { id: 2, likes: 10, tags: ['html', 'nodejs'] },
    { id: 3, likes: 50, tags: ['js', 'html', 'css'] },
    { id: 4, likes: 20, tags: ['js', 'html'] },
];

// Создаем массив всех тегов
// Стартовый аккумулятор - пустой массив
// ----------------------------------------------------------------------------------------
let allTags = tweets.reduce((accum, tweet) => { 
    // Понятная, но неправильная запись
    //          accum.push(...tweet.tags);
    //          return accum;

    // Правильная запись :
    // При каждом возврате - создаем массив из элементов аккумулятора 
    //                       и добавляем все элементы текущей итерации
    return [...accum, ...tweet.tags];
}, []);

console.log('Все теги - ', allTags);

// Делаем статистику тегов -  объект, у которого свойства - это названия тегов,
// а значения - количество каждого тега в массиве  allTags
// Стартовый аккумулятор - пустой объект
// ----------------------------------------------------------------------------------------
let tagsStat = allTags.reduce((acc, tag) => {
    // Вывод в консоль текущего объекта - аккумулятора
    console.log(acc);
    // Используем доступ к свойству через переменную, в которой - строка с именем ключа !!!
    if (acc[tag]) {
        // Если свойство с ключем  tag  есть, то его значение увеличиваем на 1
        acc[tag] = acc[tag] + 1;
    } else {
        // Если свойства с ключем  tag  нет, то создаем это свойство и устанавливаем ему значение 1
        acc[tag] = 1;
    }
    return acc;
}, {});

console.table(tagsStat);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Более правильный вариант синтаксиса (чтобы не менять объект по сcылке )
// ----------------------------------------------------------------------------------------
tagsStat = allTags.reduce((acc, tag) => {

    // Используем доступ к свойству через переменную, в которой - строка с именем ключа !!!
    if (acc[tag]) {
        // Если свойство с ключем  tag  есть, то возвращаем новый объект,
        // в него распыляем все свойства объекта-аккумулятора и свойству с именем, 
        // указанным в переменной tag увеличиваем значение на 1
        return {
            ...acc,
            [tag]: acc[tag] + 1,
        };
    };

        // Если свойства с ключем  tag  нет, то возвращаем новый объект,
        // в него распыляем все свойства объекта-аккумулятора и для свойства с именем, 
        // указанным в переменной tag  устанавливаем  значение 1
    return {
        ...acc,
        [tag]: 1,
    };
    
}, {});

console.table(tagsStat);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Запись самая короткая через тернарный оператор :
// ----------------------------------------------------------------------------------------
tagsStat = allTags.reduce((acc, tag) => ({
            ...acc,
            [tag]: acc[tag] ? acc[tag] + 1 : 1,
        }), {});

console.table(tagsStat);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод reverse() 
// ========================================================================================
// Переворачивает массив зеркально
// ----------------------------------------------------------------------------------------
numbers = [9, 6, 1, 3, 5, 8];
console.log('Usuale numbers - ', numbers);      // [9, 6, 1, 3, 5, 8]
numbers.reverse();
console.log('Reverse numbers - ', numbers);     // [8, 5, 3, 1, 6, 9]
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Метод sort()
// ========================================================================================
// Перебирает оригинальный массив
// Сортирует и ИЗМЕНЯЕТ оригинальный массив (меняет положение элементов в массиве)
// По умолчанию :
//    - сортирует по возрастанию
//    - переводит элементы к строке и сортирует по коду Unicode
//      (https://unicode-table.com)
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР. 
// Простая сортировка чисел.  ИЗМЕНЯЕТСЯ оригинальный массив !
// Здесь сортируется не потому, что число 3 > числа 1, а потому что код числа 3 больше кода числа 1
// ----------------------------------------------------------------------------------------
numbers = [9, 6, 1, 3, 5, 8];
numbers.sort();
console.log('numbers', numbers);    // [1, 3, 5, 6, 8, 9]
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР.
// Простая сортировка символов.  ИЗМЕНЯЕТСЯ оригинальный массив !
// В таблице UNICODE код заглавной буквы идет раньше, чем код прописной, поэтому не совсем по алфавиту 
// ----------------------------------------------------------------------------------------
let letters = ['a', 'k', 'c', 'w', 'b', 'B', 'A'];
letters.sort();
console.log('letters', letters);    //  ['A', 'B', 'a', 'b', 'c', 'k', 'w']
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод sort() - с колбек-функцией сравнения CompareFunction
// ========================================================================================
// Условия выполнения функции сравнения - при сортировке по возрастанию :
// Если CompareFunction (A,B) меньше 0, сортировка поставит A перед B
// Если CompareFunction (A,B) больше 0, сортировка поставит B перед A
// Если CompareFunction (A,B) равна 0, сортировка оставит A и B неизменными по отношению друг к другу,
// но отсортирует их по отношению ко всем другим элементам.
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// ПРИМЕР.
// Сортировка по возрастанию (с использованием функции)
// ----------------------------------------------------------------------------------------
numbers = [9, 6, 11, 3, 35, 1, 5, 8];

numbers.sort((currentElem, nextElem) => {
    return currentElem - nextElem;  // Условие задания сортировки по возрастанию
});
console.log('numbers', numbers);    // [1, 3, 5, 6, 8, 9, 11, 35]

// ----------------------------------------------------------------------------------------
// ПРИМЕР.
// Сортировка по убыванию (с использованием функции)
// ----------------------------------------------------------------------------------------
numbers = [9, 6, 11, 3, 35, 1, 5, 8];

numbers.sort((currentElem, nextElem) => {
    return nextElem-currentElem;  // Условие задания сортировки по убыванию
});
console.log('numbers', numbers);    // [35, 11, 9, 8, 6, 5, 3, 1]

// ========================================================================================
// Для сортировки массива, чтобы не менять оригинальный = просто сортируем копию массива
// ========================================================================================
numbers = [9, 6, 11, 3, 35, 1, 5, 8];

// Делаем копию массива
let copyNumbers = [...numbers];
console.log('numbers', numbers);            // [9, 6, 11, 3, 35, 1, 5, 8]

// Результат простой сортировки (по возрастанию) - глупость
copyNumbers.sort();
console.log('copyNumbers', copyNumbers);    // [1, 11, 3, 35, 5, 6, 8, 9]

// Результат сотрировки с функцией (по возрастанию) - правильно !
copyNumbers.sort((a,b)=> a-b);              
console.log('copyNumbers', copyNumbers);    // [1, 3, 5, 6, 8, 9, 11, 35]

// ----------------------------------------------------------------------------------------
// Можно не создавать отдельной операцией копию массива, а сразу сделать копию в одной строке с сортировкой
// ----------------------------------------------------------------------------------------
let descSortNumber = [...numbers].sort((a,b)=> b-a);    // Сортировка по убыванию
console.log('descSortNumber', descSortNumber);  // [35, 11, 9, 8, 6, 5, 3, 1]
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод sort() - Сортировка сложных типов - объектов
// ========================================================================================
// Сортировка объекта производится по значению одного из свойств
// В параметры функции приходят объекты, а сортировка - по значению отдельного свойства
// ----------------------------------------------------------------------------------------
players = [
    { id: 'player-1', name: 'Вася', timePlayed: 350, points: 50, online: true },
    { id: 'player-2', name: 'Петя', timePlayed: 120, points: 87, online: false },
    { id: 'player-3', name: 'Саша', timePlayed: 500, points: 120, online: true },
    { id: 'player-4', name: 'Кузя', timePlayed: 90, points: 60, online: false },
    { id: 'player-5', name: 'Миша', timePlayed: 120, points: 20, online: false },
];

// ----------------------------------------------------------------------------------------
// Сортировку проводим на копии оригинального массива
// Сортируем по возрастанию по времени игрока
// ----------------------------------------------------------------------------------------
let sortByTime = [...players].sort((prevPlayer, nextPlayer) =>
    prevPlayer.timePlayed - nextPlayer.timePlayed);
console.table(sortByTime);

// ----------------------------------------------------------------------------------------
// Сортируем по возрастанию по имени игрока
// ----------------------------------------------------------------------------------------
let sortByName = [...players].sort((prevPlayer, nextPlayer) => {
    // Сравнение по первому символу в имени, точнее по коду первого символа в имени
    // result - булевое значение (true/false)
    const result = prevPlayer.name[0] > nextPlayer.name[0];
    if (result) {
        return 1;
    } else {
        return -1;
    }
});
console.table(sortByName);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод flat(глубина вложенности) 
// ========================================================================================
// Разглаживаем массив до указанной глубины
// По умолчанию (если не указан параметр в скобках) - глубина разглаживания массива - 1
// Возвращает новый массив. Оригинальный остается прежним
// ----------------------------------------------------------------------------------------

let arrayNumbers = [1, 2, [3, 4], [5, 6, [7, 8]]];
// Разглаживаем оригинальный массив до глубины вложенности - 1
let newArrayNumbers1 = arrayNumbers.flat();
console.log('newArrayNumbers1', newArrayNumbers1); // [1, 2, 3, 4, 5, 6, [7, 8]]
// Разглаживаем оригинальный массив до глубины вложенности - 2
let newArrayNumbers2 = arrayNumbers.flat(2);
console.log('newArrayNumbers2', newArrayNumbers2); // [1, 2, 3, 4, 5, 6, 7, 8]
// Оригинальный массиив не изменился
console.log('arrayNumbers', arrayNumbers);       // [1, 2, [3, 4], [5, 6, [7, 8]]]
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Получение из массива объектов массива тегов и разглаживание
// ----------------------------------------------------------------------------------------
tweets = [
    { id: 1, likes: 5, tags: ['js', 'nodejs'] },
    { id: 2, likes: 10, tags: ['html', 'nodejs'] },
    { id: 3, likes: 50, tags: ['js', 'html', 'css'] },
    { id: 4, likes: 20, tags: ['js', 'html'] },
];

let allTweetsTag = tweets.map(t => t.tags);
console.log(allTweetsTag); // [Array(2), Array(2), Array(3), Array(2)]
let arrayAllTweetsTag = allTweetsTag.flat();
console.log(arrayAllTweetsTag); // ['js', 'nodejs', 'html', 'nodejs', 'js', 'html', 'css', 'js', 'html']

// Короткая запись через цепочку вызовов
arrayAllTweetsTag = tweets.map(t => t.tags).flat();
console.log(arrayAllTweetsTag); // ['js', 'nodejs', 'html', 'nodejs', 'js', 'html', 'css', 'js', 'html']
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод flatMap()
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Полный аналог предыдущего примера - с использованием метода flatMap()
// ----------------------------------------------------------------------------------------

arrayAllTweetsTag = tweets.flatMap(t => t.tags);
console.log(arrayAllTweetsTag); // ['js', 'nodejs', 'html', 'nodejs', 'js', 'html', 'css', 'js', 'html']
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Цепочки вызовов - chaining
// ========================================================================================

numbers = [1, 3, 5, 2, 4];
console.log('numbers', numbers);                        // [1, 3, 5, 2, 4]

// ----------------------------------------------------------------------------------------
// filter() - Фильтрация массива - оставить только элементы, которые больше 2
// ----------------------------------------------------------------------------------------
let greaterThenTwo = numbers.filter(num => num > 2);
console.log('greaterThenTwo', greaterThenTwo);          // [3, 5, 4]

// ----------------------------------------------------------------------------------------
// map() - Перебираем массив и утраиваем каждое значение
// ----------------------------------------------------------------------------------------
let multThree = greaterThenTwo.map(num => num * 3);
console.log('multThree', multThree);                    // [9, 15, 12]

// ----------------------------------------------------------------------------------------
// sort() - Сортируем по возрастанию
// ----------------------------------------------------------------------------------------
let sortAcc = multThree.sort((a, b) => a - b);
console.log('sortAcc', sortAcc);                        // [9, 12, 15]

// ----------------------------------------------------------------------------------------
// Цепочка вызовов, которая дает аналогичный результат и нет лишних переменных
// Каждый из последующих методов вызывается на результат работы предыдущего метода
// ----------------------------------------------------------------------------------------
sortAcc = numbers
    .filter(num => num > 2)
    .map(num => num * 3)
    .sort((a, b) => a - b);
console.log('sortAcc', sortAcc);                        // [9, 12, 15]

// ----------------------------------------------------------------------------------------

// ========================================================================================
// Цепочка вызовов при обработке массива объектов
// ========================================================================================

let users = [
    { id: '1', tag: 'San', isOnline: true, rang: 500 },
    { id: '2', tag: 'Svet', isOnline: true, rang: 600 },
    { id: '3', tag: 'Vlad', isOnline: false, rang: 100 },
    { id: '4', tag: 'Kat', isOnline: true, rang: 200 },           
];

// ----------------------------------------------------------------------------------------
// ЗАДАЧА. Отсортировать по рангу всех, кто Online
// ----------------------------------------------------------------------------------------

// 1. Фильтрация по isOnline
let userOnline = users.filter(user => user.isOnline);
console.table(userOnline);
// ----------------------------------------------------------------------------------------

// 2. Сортировка по rang
let userSortRang = userOnline.sort((a, b) => a.rang - b.rang);
console.table(userSortRang);
// ----------------------------------------------------------------------------------------

// Цепочка вызовов фильтрация, затем сортировка
// ----------------------------------------------------------------------------------------
userSortRang = users
    .filter(user => user.isOnline)
    .sort((userPrev, userNext) => userPrev.rang - userNext.rang);
console.table(userSortRang);

// ----------------------------------------------------------------------------------------

// ========================================================================================
// Цепочки вызовов (chaining) в объекте jQuery
// ========================================================================================
let element = {
    class: '',
    hovered: false,
    changeClass(nameClass) {
        this.class = nameClass;
        // Возвращаем ссылку на объект
        // Это позволяет сделать цепочку вызовов
        return this;
    },
    toggleHovered() {
        this.hovered = !this.hovered;
        // Возвращаем ссылку на объект
        // Это позволяет сделать цепочку вызовов
        return this;
    },
};

// Изменение свойств объекта через методы
// ----------------------------------------------------------------------------------------
element.toggleHovered();
element.changeClass('open');
console.log('Измененный элемент', element);

// Изменение свойств объекта через цепочку вызовов его методов
// ----------------------------------------------------------------------------------------
element.toggleHovered().changeClass('close');
console.log('Измененный элемент', element);
// ----------------------------------------------------------------------------------------


// ****************************************************************************************
// Библиотека   lodash
// ****************************************************************************************

// ========================================================================================
// _.isEmpty()
// ========================================================================================
// Проверяет пустая или не пустая сущность, которая в скобках
// Обычное использование - Проверка пустой или не пустой объект
// ----------------------------------------------------------------------------------------

console.log(_.isEmpty({}));         // true  (Объект внутри функции - пустой)
console.log(_.isEmpty({a: 1}));     // false (Объект внутри функции - НЕ пустой)

// ========================================================================================
// _.get(object,path,[defaultValue])
//      В квадратных скобках указывается необязательный параметр
// ========================================================================================
// Позволяет получить значение глубоковложенного свойства объекта
// Плюс не выдает ошибку при отсутствии ствойства в объекте
// ----------------------------------------------------------------------------------------
let shop = {
    name: 'Юпитер',
    location: {
        coord: [1, 2, 3],
        town: 'Киев',
    },
};
// ----------------------------------------------------------------------------------------
// В методе указываем объект и полный путь к этому свойству
// Возвращает значение этого свойства
console.log(_.get(shop, 'location.town'));  // Киев
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Как можно проверить наличие свойства в объекте без метода _.get()
// Если есть объект, а в нем необходимые свойства, то выполни операцию внутри if
if (shop && shop.location && shop.location.town) {
    console.log(shop.location.town);        // Киев
};
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Новый синтаксис проверки доступности свойства
// ----------------------------------------------------------------------------------------
// Если какого-то свойства вложенности нет, то поиск глубже не производится
// и возвращается  undefined. 
// Но программа не останавливается и НЕТ ОШИБКИ !!!
// ----------------------------------------------------------------------------------------
console.log(shop?.location?.town); // Киев
console.log(shop?.version?.town);  // undefined - поиск останавливается на недоступности свойства version
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.union([arrays])
// ========================================================================================
// Позволяет сделать массив из неповторяющихся значений
// Объединение массивов, при этом в результирующем массиве - только уникальные элементы
// ----------------------------------------------------------------------------------------

// В результирующем массиве - число 3 встречается только один раз
console.log(_.union([1, 2, 3], [3, 4, 5])); // [1, 2, 3, 4, 5]
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.range([start=0],end,[step=1])
// ========================================================================================
// Позволяет создать массив чисел от стартового числа (включительно), до конечного числа
// (НЕ включительно), с определенным шагом (по умолчанию 1)
// ----------------------------------------------------------------------------------------

console.log(_.range(1, 5));         // [1, 2, 3, 4]
console.log(_.range(1, 11, 2));     // [1, 3, 5, 7, 9]
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.sortBy(collection, [iteratees = [_.identity]])
// ========================================================================================
// Сортировка объекта по значению одного или нескольких свойств
// Удобно очень
// ----------------------------------------------------------------------------------------

let friends = [
    { name: 'San', age: 57 },
    { name: 'Vlad', age: 10 },
    { name: 'San', age: 40 },
    { name: 'Vlad', age: 20 },
]

// ----------------------------------------------------------------------------------------
// Сортировка объекта по одному свойству - например по возрасту
// ----------------------------------------------------------------------------------------
console.table(_.sortBy(friends, [function (friend) { return friend.age; }]));
// 0	'Vlad'	10
// 1	'Vlad'	20
// 2	'San'	40
// 3	'San'	57

// ----------------------------------------------------------------------------------------
// Сортировка объекта по нескольким свойствам - по именам, при совпадении имен - по возрасту
// ----------------------------------------------------------------------------------------
console.table(_.sortBy(friends, ['name', 'age']));
// 0	'San'	40
// 1	'San'	57
// 2	'Vlad'	10
// 3	'Vlad'	20
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.sum(arrayNumber)
// ========================================================================================
// Возвращает сумму чисел, входящих в массив
// ----------------------------------------------------------------------------------------
console.log(_.sum([1, 2, 5, 10]));  // 18

// ========================================================================================
// _.sumBy(collection, iteratees )
// ========================================================================================
// Возвращает сумму чисел, являющимися числовыми значениями определенного свойства объекта
// ----------------------------------------------------------------------------------------
friends = [
    { name: 'San', age: 57 },
    { name: 'Vlad', age: 10 },
    { name: 'San', age: 40 },
    { name: 'Vlad', age: 20 },
];

// ----------------------------------------------------------------------------------------
// Посчитать общий возраст друзей
// ----------------------------------------------------------------------------------------
console.log(_.sumBy(friends, friend => friend.age));  // 127
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.uniq(array)
// ========================================================================================
// Возвращает новый массив, удаляя все повторяющиеся значения. То есть с униальными значениями
// ----------------------------------------------------------------------------------------
console.log(_.uniq([1, 2, 3, 5, 3, 5, 6, 1, 3, 9]));  // [1, 2, 3, 5, 6, 9]
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.uniqBy(массив объекта, свойство_объекта)
// ========================================================================================
// Предназначен для работы с массивом объектов.
// Возвращает новый массив, оставляя только первые объекты в массиве с повторяющимися значениями
// и удаляя все остальные объекты с повторяющимися значениями свойств. 
// ----------------------------------------------------------------------------------------
friends = [
    { name: 'San', age: 57 },
    { name: 'Vlad', age: 10 },
    { name: 'San', age: 40 },
    { name: 'Vlad', age: 20 },
];
// Оставляем только первые объекты с уникальными именами
console.table(_.uniqBy(friends, friend => friend.name));
// 0	'San'	57
// 1	'Vlad'	10
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.sortedUniq(array)
// ========================================================================================
// В качестве аргумента должен быть отсортированный массив
// Возвращает новый отсортированный массив с уникальными значениями
// ----------------------------------------------------------------------------------------
console.log(_.sortedUniq([1,1,2,2,3,4])); // [1, 2, 3, 4]

// ========================================================================================
// _.sortedUniq(array, [iteratee])
// ========================================================================================
// Возвращает новый массив объектов с уникальными значениями свойства и отсортированый
// по значениям этого свойства
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.random([lower=0], [upper=1], [floating])
// ========================================================================================
// Возвращает рандомные числа в определенном диапазоне.
// В зависимости от передаваемых аргументов, числа могут быть целыми или с десятичной точкой
// ----------------------------------------------------------------------------------------
let rand = _.random(0, 5);
// => an integer between 0 and 5
console.log('an integer between 0 and 5 - ', rand);
 
rand = _.random(5);
// => also an integer between 0 and 5
console.log('an integer between 0 and 5 - ', rand);
 
rand = _.random(5, true);
// => a floating-point number between 0 and 5
console.log('a floating-point number between 0 and 5 - ', rand);
 
rand = _.random(1.2, 5.2);
// => a floating-point number between 1.2 and 5.2
console.log('a floating-point number between 1.2 and 5.2 - ', rand);

// ========================================================================================
// _.min(array)
// ========================================================================================
// Возвращает минимальное числовое значение из массива.
// ----------------------------------------------------------------------------------------
console.log(_.min([2, 5, 7, 45, 1]));   // 1

// ========================================================================================
// _.minBy(array, [iteratee=_.identity])
// ========================================================================================
// Возвращает минимальное числовое значение определенного свойства из массива объектов.
// ----------------------------------------------------------------------------------------
friends = [
    { name: 'San', age: 57 },
    { name: 'Vlad', age: 10 },
    { name: 'San', age: 40 },
    { name: 'Vlad', age: 20 },
];
// Возвращает объект - друга с самым маленьким возрастом
console.log(_.minBy(friends, friend => friend.age));
// {name: 'Vlad', age: 10}

// ========================================================================================
// _.max(array)
// ========================================================================================
// Возвращает максимальное числовое значение из массива.
// ----------------------------------------------------------------------------------------
console.log(_.max([2, 5, 7, 45, 1]));   // 45

// ========================================================================================
// _.maxBy(array, [iteratee=_.identity])
// ========================================================================================
// Возвращает максимальное числовое значение определенного свойства из массива объектов.
// ----------------------------------------------------------------------------------------
friends = [
    { name: 'San', age: 32 },
    { name: 'Vlad', age: 10 },
    { name: 'Shura', age: 57 },
    { name: 'Tanya', age: 37 },
];
// ----------------------------------------------------------------------------------------
// Получить имя друга с самым большим возрастом
// ----------------------------------------------------------------------------------------
let myOldestFriend = _.maxBy(friends, friend => friend.age);
let nameMyOldestFriend = myOldestFriend.name; 
let ageMyOldestFriend = myOldestFriend.age; 
console.log('Мой самый взрослый друг - ', nameMyOldestFriend, ageMyOldestFriend, 'лет.');
// Мой самый взрослый друг -  Shura 57 лет.
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.camelCase([string=''])
// ========================================================================================
// Converts string to camel case. Конвертирует любую строку в camelCase, игнорируя разделители.
// ----------------------------------------------------------------------------------------
_.camelCase('Foo Bar');         // => 'fooBar'
_.camelCase('--foo-bar--');     // => 'fooBar'
_.camelCase('__FOO_BAR__');     // => 'fooBar'
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.kebabCase([string=''])
// ========================================================================================
// Converts string to kebab case. Конвертирует любую строку в kebab case. (шашлык)
// ----------------------------------------------------------------------------------------
_.kebabCase('Foo Bar');         // => 'foo-bar'
_.kebabCase('fooBar');          // => 'foo-bar'
_.kebabCase('__FOO_BAR__');     // => 'foo-bar'
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.capitalize([string=''])
// ========================================================================================
// Converts the first character of string to upper case and the remaining to lower case.
// Конвертирует первую букву строки в верхний регистр, а остальніе в нижний регистр.
// ----------------------------------------------------------------------------------------
_.capitalize('FRED');       // => 'Fred'
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.upperCase([string=''])
// ========================================================================================
// Converts string, as space separated words, to upper case.
// Конвертирует строку - как в слова в верхнем регистре, разделенные пробелами.
// ----------------------------------------------------------------------------------------
_.upperCase('--foo-bar');       // => 'FOO BAR'
_.upperCase('fooBar');          // => 'FOO BAR' 
_.upperCase('__foo_bar__');     // => 'FOO BAR'
// ----------------------------------------------------------------------------------------

// ========================================================================================
// _.lowerCase([string=''])
// ========================================================================================
// Converts string, as space separated words, to lower case.
// Конвертирует строку - как в слова в нижнем регистре, разделенные пробелами.
// ----------------------------------------------------------------------------------------
_.lowerCase('--Foo-Bar--');     // => 'foo bar' 
_.lowerCase('fooBar');          // => 'foo bar' 
_.lowerCase('__FOO_BAR__');     // => 'foo bar'
// ----------------------------------------------------------------------------------------