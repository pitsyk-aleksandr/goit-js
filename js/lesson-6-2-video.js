// Модуль 6
// DOM и события.
// ****************************************************************************************

// Примеры из видео Репеты (2 часть)

// ========================================================================================
// Событие
// ========================================================================================
// Событие – это реакция браузера на какое-то действие (пользователя либо браузера)
// Клик мышки, скролл мышки, нажатие на клавишу, начало-конец анимации и т.п
// ----------------------------------------------------------------------------------------
// Пользователь произвел действие - браузер сгенерировал событие и отправил нам-разработчикам
// Разработчик может поймать это событие и как-то на него отреагировать - выполнить какой-то код
// ----------------------------------------------------------------------------------------
// Браузер - издатель (издает событие), разработчик - подписчик (получает событие)
// ----------------------------------------------------------------------------------------

// ========================================================================================
// На каждый HTML-элемент можно повесить "слушатель события"
// ========================================================================================
// element.addEventListener(тип_события, колбек_функция)
//    тип_события - это тип события, на который хотим реагировать... в виде строки.
//    колбек_функция - это функция, которая будет выполнена в момент наступления этого события.
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// Именование коллбек-функций для слушателей событий -  паттерны для имен :
//      handle* - handleEvent, handleSubjectEvent
//      *Handler – eventHandler, subjectEventHandler
//      on*	- onEvent, onSubjectEvent
// ----------------------------------------------------------------------------------------

const targetBtn = document.querySelector('.js-target-btn');
const addListenerBtn = document.querySelector('.js-add-listener');
const removeListenerBtn = document.querySelector('.js-remove-listener');

// Добавляем "слушателя событий" на целевую кнопку - 
//      targetBtn.addEventListener('click', onTargetButtonClick);

// Функция нажатия мышкой на "Целевую кнопку" - 3 варианта с использованием паттернов
// Паттерн имени функции - handleSubjectEvent
function handleTargetButtonClick(){
    console.log('Клик');
};
// Паттерн имени функции - subjectEventHandler
function targetButtonClickHandler(){
    console.log('Клик');
};


// ========================================================================================
// Ссылочная идентичность колбека
// ========================================================================================
// Все хандлеры выносятся в отдельные ИМЕНОВАННЫЕ функции и указываются в слушателях по имени !
// ----------------------------------------------------------------------------------------
// При подписке (add) и отписке (remove) в слушатель событий должна передаваться
// именованная ссылка на одну и ту же функцию
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Когда происходит событие, браузер генерирует (собирает) объект event,
// который приходит обязательным параметром в колбек-функцию (например в onTargetButtonClick)
// ----------------------------------------------------------------------------------------
// event содержит служебную информацию о событии, которое произошло, все его свойства и методы
// ----------------------------------------------------------------------------------------

// Паттерн имени функции - onSubjectEvent
function onTargetButtonClick(event) {
    console.log('Клик');

    // Вывод в консоль свойств и методов объекта  event
    console.log(event);
};

// ----------------------------------------------------------------------------------------
// Добавляем слушателей события на кнопки, которые будут добавлять/снимать слушателя с целевой кнопки !
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Добавляем "слушателя событий" на кнопку - Добавить слушателя
// ----------------------------------------------------------------------------------------
addListenerBtn.addEventListener('click', (event) => {
    console.log('Добавлен слушатель на целевую кнопку');
    // Вывод в консоль свойств и методов объекта  event
    console.log(event);

    // Добавляем "слушателя событий" на целевую кнопку 
    targetBtn.addEventListener('click', onTargetButtonClick);
});

// ----------------------------------------------------------------------------------------
// Добавляем "слушателя событий" на кнопку - Снять слушателя
// Внимание ! Должен сниматься слушатель с ТОГО ЖЕ события и с ТОЙ ЖЕ ИМЕНОВАННОЙ функции !!!
// ----------------------------------------------------------------------------------------
removeListenerBtn.addEventListener('click', (event) => {
    console.log('Снят слушатель из целевой кнопки');
    targetBtn.removeEventListener('click', onTargetButtonClick);
});

// ----------------------------------------------------------------------------------------


// ========================================================================================
// События формы
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Событие submit формы
// ----------------------------------------------------------------------------------------

// Делаем ссылку на форму регистрации
const formReg = document.querySelector('.js-regiter-form');
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// При нажатии на кнопку, у которой установлен type="submit", генерируется событие submit
// и происходит автоматическая отправка формы. То есть форма реагирует на событие.
// ----------------------------------------------------------------------------------------
// Когда отправляется форма - вкладка перезагружается !
// ----------------------------------------------------------------------------------------

// Добавляем слушатель события  submit  на форму регистрации
formReg.addEventListener('submit',onFormRegSubmit);

// Функция - обработчика события
function onFormRegSubmit(event) {

    // Предотвратить отправку формы - реакцию браузера по умолчанию
    event.preventDefault();

    // Свойство currentTarget события event ссылается на тот элемент, который прослушивается
    // в нашем случае - на formReg
    console.log('event.currentTarget - ', event.currentTarget);

    // Вывод всех свойств и методов текущей формы
    console.dir(event.currentTarget);

    // elements - содержит список всех элементов формы,
    // включая имена input, заданных в них атрибутами name и их текущие значения
    // elements - есть только у формы !

    // Можно прочитать выбранное значение радиокнопок (name="subscription")
    console.log(event.currentTarget.elements.subscription.value);

    console.log('Это submit формы');

    // Собираем данные от input формы для отправки куда-то

    // elements необходимо для обращения к одному конкретному элементу

    // Для упрощения обращения к элементу :
    const formElements = event.currentTarget.elements;

    const mail = formElements.email.value;
    const password = formElements.password.value;
    const subscription = formElements.subscription.value;

    const toBase = { mail, password, subscription };
    console.log('toBase - ', toBase);  // {mail: '1@11.11', password: '23456', subscription: 'pro'}

    // ========================================================================================
    // Класс FormData
    // ========================================================================================
    // Используется для сбора и отправки данных на сервер
    // ----------------------------------------------------------------------------------------
    // Собирает в себя все значения всех полей формы
    // ----------------------------------------------------------------------------------------
    // В FormData Передается ссылка на сам DOM-element (форму)
    // ----------------------------------------------------------------------------------------
    // Используя метод forEach можно получить все наименования кючей и их значения
    // Есть и другие методы для вызова данных, например, get()
    // ----------------------------------------------------------------------------------------

    // Делаем новый FormData
    const formData = new FormData(event.currentTarget);
    // Смотрим все данные
    formData.forEach((value, name) => {
        console.log('Element name', name);
        console.log('Element value', value);
    });
    // ----------------------------------------------------------------------------------------
};
// ----------------------------------------------------------------------------------------



// ========================================================================================
// События input-ов
// ========================================================================================

// ========================================================================================
// Пример использования
// Ввод имени, Принятие лицензии и кнопка
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Паттерн "Объект ссылок"
// ----------------------------------------------------------------------------------------
// Создается объект, например с именем refs (cсылки), куда вкладываются ссылки на необходимые объекты
// Для вызова ссылки используем refs.имя_ссылки_в_объекте
// ----------------------------------------------------------------------------------------
const refs = {
    input: document.querySelector('.js-input'),
    licenseCheckbox: document.querySelector('.js-license'),
    button: document.querySelector('.js-button'),
    nameInButton: document.querySelector('.js-button > span'),
};

console.log('input', refs.input);
console.log('licenseCheckbox', refs.licenseCheckbox);
console.log('button', refs.button);
console.log('nameInButton', refs.nameInButton);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Событие focus
// ========================================================================================
// Происходит, когда объект получает фокус
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Событие blur
// ========================================================================================
// Происходит, когда объект теряет фокус
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Событие input
// ========================================================================================
// Происходит, когда изменяется значение input, даже без потери фокуса
// Используется на текстовых полях и textaria
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Событие change
// ========================================================================================
// Происходит при изменении значения и только при потере фокуса
// ----------------------------------------------------------------------------------------
// На текстовых полях и textaria - не используется
// Лучше применять на radiobutton & checkbox
// ----------------------------------------------------------------------------------------

refs.input.addEventListener('focus', onInputFocus);

refs.input.addEventListener('blur', onInputBlur);

refs.input.addEventListener('input', onInputChange);

refs.licenseCheckbox.addEventListener('change', onLicenseChange);


function onInputFocus() {
    console.log('input получил focus - событие focus');
};

function onInputBlur() {
    console.log('input потерял focus - событие blur');
};

function onInputChange(event) {
    console.log('input изменил значение - событие input');
    // Свойство currentTarget события event ссылается на тот элемент, который прослушивается
    console.log('Значение input =', event.currentTarget.value);
    // Изменение значения span в кнопке
    // textContent - это свойство для текстовых полей
    refs.nameInButton.textContent = event.currentTarget.value;

};

function onLicenseChange(event) {
    // checked - это свойство checkbox и radiobutton, возвращающее true (выбрано) или false (не выбрано)
    console.log(event.currentTarget.checked);
    // у кнопки есть свойство disabled, которое является и атрибутом тоже
    // Меняем значения свойства кнопки в зависимости от логического значения licenseCheckbox.checked
    refs.button.disabled = !event.currentTarget.checked;
    
};

// ========================================================================================
// События клавиатуры
// ========================================================================================

// ========================================================================================
// keydown
// ========================================================================================
// Реагирует на нажатие ЛЮБОЙ клавиши, включая служебные
// ----------------------------------------------------------------------------------------

// ========================================================================================
// keypress
// ========================================================================================
// Реагирует на нажатие только тех клавиш, которые ГЕНЕРИРУЮТ СИМВОЛ
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Свойства событий клавиатуры (KeyboardEvent)
// ========================================================================================
// code - КОД клавиши - физическая клавиша на клавиатуре - Ключевое слово с названием клавиши
// ----------------------------------------------------------------------------------------
// key - ЗНАЧЕНИЕ символа, который вводился. На том языке и в том регистре, в котором идет набор
// ----------------------------------------------------------------------------------------

// Создаем объект ссылок
const refsNew = {
    output: document.querySelector('.js-output'),
    clearBtn: document.querySelector('.js-clear-text'),
}
// ----------------------------------------------------------------------------------------

// Слушатели события клавиатуры вешаем на самый главный объект - window
window.addEventListener('keypress', onKeypress);

// Слушатель событий на клавишу "Очистить"
refsNew.clearBtn.addEventListener('click', onClickBtnClear);

function onKeypress(event) {
    // console.log(event);

    // code - КОД клавиши, ключевое слово с названием клавиши
    console.log('event.code - ', event.code);

    // key - ЗНАЧЕНИЕ символа, который вводился
    console.log('event.key - ', event.key);

    // Выводим значение, суммируя введенные символы
    refsNew.output.textContent += event.key;
};
 
function onClickBtnClear() {
    console.log('Клик - onClickBtnClear');
    // Очищаем значение абзаца с введенным ранее текстом
    refsNew.output.textContent = '';
};


// ========================================================================================
// События мыши
// ========================================================================================

// ========================================================================================
// mouseenter
// ========================================================================================
// Срабатывает, когда мышка входит в границы блока и находится над ним
// ----------------------------------------------------------------------------------------

// ========================================================================================
// mouseleave
// ========================================================================================
// Срабатывает, когда мышка выходит за границы блока и НЕ находится над ним
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// mouseenter + mouseleave = :hover в CSS
// ----------------------------------------------------------------------------------------

// ========================================================================================
// mouseover
// ========================================================================================
// Срабатывает, когда мышка находится непосредственно над родительским блоком
// ----------------------------------------------------------------------------------------

// ========================================================================================
// mouseout
// ========================================================================================
// Срабатывает, когда мышка находится над ребенком, который перекрывает родительский блок
// ----------------------------------------------------------------------------------------

// ========================================================================================
// mousemove
// (chatty event - событие которое происходит очень-очень часто)
// ========================================================================================
// Срабатывает на ЛЮБОЕ движение мышки
// ----------------------------------------------------------------------------------------

const refsBox = document.querySelector('.js-box');
console.log(refsBox);

refsBox.addEventListener('mouseenter', onMouseEnter);
refsBox.addEventListener('mouseleave', onMouseLeave);
// refsBox.addEventListener('mousemove', onMouseMove);

function onMouseEnter(event) {
    const box = event.currentTarget;
    box.classList.add('box--active');
};

function onMouseLeave(event) {
    const box = event.currentTarget;
    box.classList.remove('box--active');
};

function onMouseMove(event) {
    console.log(event);
};




