// Модуль 4
// ****************************************************************************************

// Примеры из конспекта

// ========================================================================================
// Колбек-функции (callback)
// ========================================================================================
// Функция не отличается от чисел, строк или массивов - это просто
// специальный тип данных (объект высшего порядка), - значение, которое
// можно сохранять в переменной или передавать в качестве аргумента
// в другую функцию.
// ----------------------------------------------------------------------------------------
// Определение функции
function greet(name) {
  return `Ласкаво просимо ${name}.`;
}

// Вызов функции и вывод РЕЗУЛЬТАТА в консоль
console.log(greet("Манго")); // Ласкаво просимо Манго.

// Выводим функцию greet в консоль, не вызывая её
console.log(greet); // ƒ greet() { return `Ласкаво просимо ${name}.`; }

// ----------------------------------------------------------------------------------------
// В первом случае, вызываем функцию   greet  с помощью круглых скобок,
// и в консоль выводится результат выполнения функции.
// Во втором случае передается ССЫЛКА на функцию, а не результат вызова
// (отсутствуют круглые скобки), поэтому в консоль выводится тело функции.
// ----------------------------------------------------------------------------------------
// Это значит,что функцию можно присвоить в переменную или
// передать как аргумент другой функции !!!
// ----------------------------------------------------------------------------------------

const fGreet = greet;
console.log('Функция - ', greet);

// ========================================================================================
// Функция обратного вызова (callback, колбек) - это функция, которая передается
// другой функции как аргумент, а та, в свою очередь, вызывает переданную функцию.
// ========================================================================================
// Функция высшего порядка (higher order function) - функция, которая принимает
// в качестве параметров другие функции или возвращает функцию в качестве результата.
// ========================================================================================

// Колбек-функция
function privet(name) {
  console.log(`Добро пожаловать - ${name}.`);
}

// Функция высшего порядка
function registerGuest(name, callback) {
    console.log(`Регистрируем гостя - ${name}.`); // Регистрируем гостя - Саша.
    // Вызов колбек-функции с аргументом - имя гостя
    callback(name); // Добро пожаловать - Саша.
}

// Вызов функции высшего порядка с аргументами : имя гостя и название колбек-функции
registerGuest("Саша", privet);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Инлайн-колбек
// ========================================================================================
// Если функция маленькая, и нужна только для передачи аргументом, то её можно
// объявить непосредственно в моментвызова функции, в которую передаем колбек.
// Эта функция будет доступна только в качестве параметра и больше нигде.
// ----------------------------------------------------------------------------------------

// Объявление функции
function registerGuestNew(name, callback) {
  console.log(`Реєструємо гостя ${name}.`);
  callback(name);
}

// Вызываем функцию регистрации и передаём инлайн-функцию greet в качестве колбека
registerGuestNew("Манго", function greetNew(name) {
  console.log(`Ласкаво просимо ${name}.`);
});

// Вызываем функцию регистрации и передаём инлайн-функцию notify в качестве колбека
registerGuestNew("Полі", function notifyNew(name) {
  console.log(`Шановний(а) ${name}, ваш номер буде готовий за 30 хвилин.`);
});
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Несколько колбек-функций
// ========================================================================================
// Функция может принимать любое количество колбеков
// ----------------------------------------------------------------------------------------
// Пример : Варианты обработки звонка при доступности/недоступности абонента
// ----------------------------------------------------------------------------------------
function processCall(recipient, onAvailable, onNotAvailable) {
  // Имитируем доступность абонента случайным числом
  const isRecipientAvailable = Math.random() > 0.5;

  // Если абонент НЕ доступен
  if (!isRecipientAvailable) {
    onNotAvailable(recipient);
    return;
  }
  // Если абонент доступен
  onAvailable(recipient);
}

function takeCall(name) {
  console.log(`З'єднуємо з ${name}, очікуйте...`);
  // Логика принятия звонка
}

function activateAnsweringMachine(name) {
  console.log(`Абонент ${name} недоступний, залиште повідомлення.`);
  // Логика активации автоответчика
}

function leaveHoloMessage(name) {
  console.log(`Абонент ${name} недоступний, записуємо голограму.`);
  // Логика записи голограммы
}

// Вызов функции с обработкой звонка абонента и указанием :
//     - абонента
//     - функции-обработцика при доступности абонента
//     - функции-обработцика при НЕ доступности абонента
processCall("Манго", takeCall, activateAnsweringMachine);
processCall("Полі", takeCall, leaveHoloMessage);

// ----------------------------------------------------------------------------------------
// Колбеки применяются для обработки действий пользователя на страничкеБ
// на момент обработки запроса на сервер, выполнения заранее неизвестных
// функций. Это функции, предназначенные для отложенного использования.
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Абстрактное повторение
// ========================================================================================
// Абстракция - спрятывание деталей реализации
// Функции - это хороший спосиб построения абстракций.
// ----------------------------------------------------------------------------------------
// Объявление функции - Печать значения
function printValue(value) {
  console.log(value);
}
// Объявление функции - Печать текста и значения
function prettyPrint(value) {
  console.log("Logging value: ", value);
}
// Объявление функции - Повторение определенного действия
function repeat(n, action) {
  for (let i = 0; i < n; i += 1) {
    action(i);
  }
}

// Передаём printValue как callback-функцию - с указанием ТИПА действия
repeat(3, printValue);
// 0
// 1
// 2

// Передаём prettyPrint как callback-функцию - с указанием ТИПА действия
repeat(2, prettyPrint);
// Logging value: 0
// Logging value: 1

// ----------------------------------------------------------------------------------------

// ========================================================================================
// Метод forEach
// ========================================================================================
// Метод переборки массива, который используется для замены циклов
// for і for...of в работе с коллекцией данных.
// ----------------------------------------------------------------------------------------
//    массив.forEach(function callback(element, index, array) {
//        Тіло колбек-функції
//    });
// ----------------------------------------------------------------------------------------
// - Поэлементно перебирает массив
// - Вызывает колбек-функцию для кждого элемента массива.
// - Ничего не возвращает.
// Аргументы колбек-функции - это значения текущего элемента element,
// его индекс index и собственно - исходной массив array.
// Можно объявлять только необходиые параметры, чаще всего - это элемент,
// главное - не забывать о порядке параметров.
// ----------------------------------------------------------------------------------------
// Прервать выполнение метода forEach нельзя, всегда перебирается массив до конца.
// ----------------------------------------------------------------------------------------
const numbers = [5, 10, 15, 20, 25];

// Классический for
for (let i = 0; i < numbers.length; i += 1) {
  console.log(`Индекс ${i}, значение ${numbers[i]}`);
}
let arrayNew = [];
// Метод переборки forEach
numbers.forEach(function (number, index, array) {
    console.log(`Индекс ${index}, значение ${number}`);
    arrayNew.push(number); // Добавляем элемент в новый массива
    console.log('array - ', array); // текущий массив  numbers
    console.log('arrayNew - ',arrayNew); 
});

// ========================================================================================
//
// ========================================================================================
//
// ----------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------

// ========================================================================================
//
// ========================================================================================
//
// ----------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------


// ========================================================================================
//
// ========================================================================================
//
// ----------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------


// ========================================================================================
//
// ========================================================================================
//
// ----------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------


