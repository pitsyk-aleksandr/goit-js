// Модуль 6
// DOM и события.
// ****************************************************************************************

// Примеры из видео Репеты

// ========================================================================================
// Поиск селектора
// ========================================================================================
// ----------------------------------------------------------------------------------------
// querySelector - возвращает ОДИН элемент.
// Ищет до первого совпадения
// Для поиска ищется именно CSS-селектор - в его синтаксисе
// ----------------------------------------------------------------------------------------
// Если ничего не находит  -  возвращает  null
// ----------------------------------------------------------------------------------------
const navEl = document.querySelector('.nav-site');

console.log(navEl); // показывает HTML-код селектора

console.dir(navEl); // показывает свойства и методы селектора
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// querySelectorAll - возвращает ВСЕ элементы.
// Возвращает список элементов (Nodelist) - типа массива.
// У этого массива есть свойство - lenght (длина) .
// В этом списке все элементы расположены в том порядке, в котором поисковик их встретил.
// ----------------------------------------------------------------------------------------
// Если ничего не находит  -  возвращает пустой список элементов Nodelist []
// ----------------------------------------------------------------------------------------

const navElAllLi = document.querySelectorAll('li');
console.dir(navElAllLi);

// ----------------------------------------------------------------------------------------
// document.querySelector - производится поиск по всему документу
// element.querySelector - производится поиск необходимого селектора только внутри элемента.
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Свойства объекта
// ========================================================================================
// Есть некоторые атрибуты, который являются и свойствами объекта
// в img  -  src, alt
// в ссылке - href
// ----------------------------------------------------------------------------------------
// Эти свойства доступны на чтение и запись
// ----------------------------------------------------------------------------------------
// При изменении свойств - перерисовывается (рендерится) элемент страницы.
// ----------------------------------------------------------------------------------------

const image3 = document.querySelector('.image-3');

const srcImage3 = image3.src;
console.log('image3.src = ', image3.src); // image3.src = https://picsum.photos/id/16/320/240


// ----------------------------------------------------------------------------------------
// У всех объектов, у которых есть какой-то текст (заголовки, абзацы, кнопки, ссылки и т.п.),
// есть свойство TextContent
// Это свойство также можно динамически изменять.
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Методы атрибута
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Не все атрибуты становятся свойствами
// Есть определенные методы для работы с ЛЮБЫМИ атрибутами
// ----------------------------------------------------------------------------------------
// объект.getAtributes('имя_атрибута') - получение значения атрибута
// объект.setAtributes('имя_атрибута') - установка/изменение значения атрибута
// объект.removeAtributes('имя_атрибута') - удаление атрибута
// объект.hasAtributes('имя_атрибута') - проверка наличия атрибута

// Получение значения атрибута
const atrSrcImage3 = image3.getAttribute('src'); 
console.log('atrSrcImage3 = ', atrSrcImage3); // atrSrcImage3 = https://picsum.photos/id/16/320/240

// Установка нового атрибута
image3.setAttribute('alt', 'Море'); 

// Получение значения атрибута
const atrAltImage3 = image3.getAttribute('alt');
console.log('atrAltImage3 = ', atrAltImage3); // atrAltImage3 = Море

// Удаление атрибута
image3.removeAttribute('alt'); 

// Проверка наличия атрибута
const artHasAltImage3 = image3.hasAttribute('alt'); 
console.log(image3.hasAttribute('alt')); // false

// ----------------------------------------------------------------------------------------
// Примечание ! Установка и изменение id - через setAttributes()
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Псевдомассив dataset.  Пользовательские атрибуты  data-
// ========================================================================================
// data-атрибуты используются для дополнения функционала
// На нестандартный такой атрибут можно дать любое имя и присвоить любое значение
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// Как стандартно присваивать имена классов и атрибутов (на примерах):
//      action - класс оформления для стилей CSS
//      js-action - класс, который явно указывает, что такой класс - для работы JavaScript

// Атрибут data-action - ставится в теги и может иметь самые разнообразные строковые значения
// ----------------------------------------------------------------------------------------

// Поиск объекта по названию класса
const jsActionEl = document.querySelector('.js-actions');
console.log('jsActionEl = ', jsActionEl);

// Поиск всех кнопок (тег button), которые находятся в div c классом js-actions
const btnAllJsActionEl = document.querySelectorAll('.js-actions button');
console.log('btnAllJsActionEl = ', btnAllJsActionEl); // NodeList(3) [button, button, button]

// Поиск первой кнопки в псевдомассиве NodeList - по индексу
console.log('Первая кнопка', btnAllJsActionEl[0]);

// dataset - это объект data-атрибутов, содержащая
//  - название data-атрибута (которое стоит за "data-") - в качестве ключа
//  - значение data-атрибута (которое стоит после знака =)
console.log('dataset - ', btnAllJsActionEl[0].dataset); // DOMStringMap {action: 'add'}

// Получение значения data-атрибута через dataset
console.log('dataset - ', btnAllJsActionEl[0].dataset.action); // add

// Получение значения data-атрибута через getAttribute()
console.log('getAttribute - ', btnAllJsActionEl[0].getAttribute('data-action')); // add

// ----------------------------------------------------------------------------------------
// На одном объекте может быть несколько data-атрибутов !
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Работа с классами
// ========================================================================================
// У каждого элемента есть свойство classList,
// типа псевдомассив в котором указаны все классы данного элемента
// ----------------------------------------------------------------------------------------

console.log(jsActionEl.classList);
            // ['actions', 'js-actions', value: 'actions js-actions']

// Добавить новый класс к элементу
jsActionEl.classList.add('new-class'); 

console.log(jsActionEl.classList);
            //  ['actions', 'js-actions', 'new-class', value: 'actions js-actions new-class']

// Удалить класс из элемента
jsActionEl.classList.remove('new-class'); 

console.log(jsActionEl.classList);
        // ['actions', 'js-actions', value: 'actions js-actions']
            
// Переключатель - Добавить класс, если нет /Удалить класс, если есть из элемента
jsActionEl.classList.toggle('info'); 
console.log(jsActionEl.classList);
        // ['actions', 'js-actions', 'info', value: 'actions js-actions info']

jsActionEl.classList.toggle('info'); 
console.log(jsActionEl.classList);
        // ['actions', 'js-actions', value: 'actions js-actions']

// Заменить существующий класс на другой
jsActionEl.classList.replace('actions','new-actions'); 
console.log(jsActionEl.classList);
        // ['new-actions', 'js-actions', 'info', value: 'new-actions js-actions info']
        
// Проверка наличия класса в элементе - возвращает true/false
console.log(jsActionEl.classList.contains('info')); // false


// ----------------------------------------------------------------------------------------
// Поиск элемента по сложному селектору
// Например - в меню навигации по сайту - по классу и содержанию атрибута href в этом классе
// (без пробела между ними)
// ----------------------------------------------------------------------------------------
// Например, текущий URL
const menuCurrent = '/portfolio';

// Поиск в меню навигации по сложному селектору
// в меню навигации по сайту - по классу и содержанию атрибута href в этом классе (без пробела между ними)
const linkEl = document.querySelector(`.site-nav__link[href="${menuCurrent}"]`);
console.log('linkEl ====  ', linkEl);

// Добавление найденному элементу нового класса, для которого уже в CSS установлен другой цвет
linkEl.classList.add('site-nav__link--current');

// ----------------------------------------------------------------------------------------

// ========================================================================================
// Навигация по сайту - возможность
// У каждого родителя есть свойства по детям, которые можно использовать
// ========================================================================================
// Родитель - ребенок   (для первого уровня вложенности)
// Предок - потомок (для уровней вложенности после первого)
// Сосед - селекторы одного уровня, у которых один родитель
// ----------------------------------------------------------------------------------------

// Элемент-родитель
const menuEl = document.querySelector('.site-nav');

console.log(menuEl.children); // Все дети
console.log(menuEl.children[1]); // Ребенок с индексом 1
console.log(menuEl.firstElementChild); // Первый ребенок
console.log(menuEl.lastElementChild); // Последний ребенок


// ========================================================================================
// Создание элементов
// ========================================================================================
// document.createElement()
// ----------------------------------------------------------------------------------------
// Порядок создания элемента :
// ========================================================================================
// Конструирование DOM-элемента:
// ========================================================================================
// 1. Сначала создаем новый элемент - тег  
//    Создание нового элемента - указываем просто тег
const titleEl = document.createElement('h1');
console.log('titleEl - ', titleEl);     // <h1></h1>
// Элемент создался просто в памяти, но не выведен на страничку.
// ----------------------------------------------------------------------------------------
// 2. Наполняем элемент свойствами и контентом
//    2.1. Добавляем класс
titleEl.classList.add('page-title');
console.log('titleEl - ', titleEl);     // <h1 class="page-title"></h1>
//    2.2. Добавляем текстовый контент
titleEl.textContent = 'Заголовок';
console.log('titleEl - ', titleEl);     // <h1 class="page-title">Заголовок</h1>
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Вставка сконструированного элемента на страницу по одному элементу
// ========================================================================================

// Варианты :

// ----------------------------------------------------------------------------------------
// parentElement.appendChild(elem)
// Добавляет elem в конец дочерних элементов parentElement
// ----------------------------------------------------------------------------------------
// parentElement.insertBefore(elem,nextSibling)
// Добавляет elem в родительский элемент перед дочерним элементом nextSibling
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Неоебходима ссылка на родительский элемент - в кого мы хотим добавить сконструированный элемент
// ----------------------------------------------------------------------------------------
// Например, вставляем заголовок в body
//    document.body.appendChild(titleEl);
// Элемент вставился в конец элемента body
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// Еще пример - создание картинки и добавление ее в body
const imageEl = document.createElement('img');
imageEl.src = "https://picsum.photos/id/17/320/240";
imageEl.alt = "Картинка-конструктор";
imageEl.width = 320;
console.log('imageEl -', imageEl);
//    document.body.appendChild(imageEl);
// ----------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------
// Пример добавить новый элемент в меню навигации, который есть на сайте
// ----------------------------------------------------------------------------------------
// Концепция - собираем всю конструкцию в памяти, а затем одной операцией вешаем на сайт
// ----------------------------------------------------------------------------------------
// Создаем элемент списка
const navItemElem = document.createElement('li');
navItemElem.classList.add('site-nav__item');
console.log('navItemElem-', navItemElem);
// ----------------------------------------------------------------------------------------
// Создаем элемент - ссылка
const navLinkElem = document.createElement('a');
navLinkElem.classList.add('site-nav__link');
navLinkElem.textContent = 'Личный кабинет';
navLinkElem.href = '/profile';
console.log('navLinkElem', navLinkElem);
// ----------------------------------------------------------------------------------------
// Вкладываем элемент-ссылку в родительский элемент-li (пока просто в памяти)
navItemElem.appendChild(navLinkElem);

// ----------------------------------------------------------------------------------------
// Для добавления пункта меню - получаем ссылку на родительский элемент
const navElem = document.querySelector('.site-nav');
// ----------------------------------------------------------------------------------------
// Добавляем новый элемент из памяти в действующий на странице ul в конец списка
// navElem.appendChild(navItemElem);
// ----------------------------------------------------------------------------------------
// Добавляет elem в родительский элемент перед самым первым дочерним элементом
// navElem.insertBefore(navItemElem, navElem.firstElementChild);
// ----------------------------------------------------------------------------------------
// Добавляет elem в родительский элемент перед самым последним дочерним элементом
// navElem.insertBefore(navItemElem, navElem.lastElementChild);
// ----------------------------------------------------------------------------------------
// Добавляет elem в родительский элемент перед ВТОРЫМ дочерним элементом - с индексом [1]
navElem.insertBefore(navItemElem, navElem.children[1]);
// ----------------------------------------------------------------------------------------

// ========================================================================================
// Вставка сконструированного элемента на страницу - несколько элементов
// ========================================================================================

// Варианты :

// ----------------------------------------------------------------------------------------
// parentElement.append(elem1, elem2, ...)
// Добавляет несколько элементов elem в КОНЕЦ дочерних элементов parentElement
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// parentElement.prepend(elem1, elem2, ...)
// Добавляет несколько элементов elem в НАЧАЛО дочерних элементов parentElement
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Добавляем заголовок и картинку, которые мы создали ранее - в div c классом="hero"
// ----------------------------------------------------------------------------------------
// Для добавления  - получаем ссылку на родительский элемент
const heroElem = document.querySelector('.hero');
// Добавляем нескольео элементов
heroElem.append(titleEl, imageEl);
// ----------------------------------------------------------------------------------------



// ========================================================================================
// Создание коллекции элементов - 98% useCase (наиболее часто используется)
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Создаем коллекцию
// ----------------------------------------------------------------------------------------
const colorPickerOptions = [
        { label: 'red', color: '#F44336' },
        { label: 'green', color: '#4CAF50' },
        { label: 'blue', color: '#2196F3' },
        { label: 'grey', color: '#607D8D' },
]

// ----------------------------------------------------------------------------------------
// Получаем ссылку на объект div с классом = "js-color-picker"
// ----------------------------------------------------------------------------------------
const colorPickerContainerEl = document.querySelector('.js-color-picker');
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Вариант 1 - old School
// ----------------------------------------------------------------------------------------
// Добавление группы кнопок - через цикл, перебирающий массив
// ----------------------------------------------------------------------------------------
const buttonElsOld = [];
for (const option of colorPickerOptions) {
        // Для каждого объекта создадим кнопки
        // const option = colorPickerOptions[0];

        // Создаем кнопки
        const buttonEl = document.createElement('button');
        buttonEl.type = 'button';
        buttonEl.textContent = option.label; // Надпись на кнопке
        buttonEl.classList.add('color-picker__option');  // Установка класса

        // Устанавливаем inline-style для кнопки (в теге CSS)
        buttonEl.style.color = 'black';
        buttonEl.style.backgroundColor = option.color;
        // buttonEl.setAttribute('width', '150px');

        // console.log('buttonEl - ', buttonEl);

        // Добавляем кнопку в массив
        buttonElsOld.push(buttonEl);
        
}

console.log('buttonElsOld - ', buttonElsOld);    
 
// ----------------------------------------------------------------------------------------
// Добавляем в div расшаренный массив - с тегами кнопок
// ----------------------------------------------------------------------------------------
colorPickerContainerEl.append(...buttonElsOld);
// ----------------------------------------------------------------------------------------
// ========================================================================================


// ========================================================================================
// Вариант 2 - New School
// ----------------------------------------------------------------------------------------
// Перебор массива через map - возвращает коллекцию той же длины
// ----------------------------------------------------------------------------------------
const buttonElsNew = colorPickerOptions.map(option => {
        // Создаем кнопки
        const buttonEl = document.createElement('button');
        buttonEl.type = 'button';
        buttonEl.textContent = option.label; // Надпись на кнопке
        buttonEl.classList.add('color-picker__option');  // Установка класса

        // Устанавливаем inline-style для кнопки (в теге CSS)
        buttonEl.style.color = 'black';
        buttonEl.style.backgroundColor = option.color;
        
        // Возвращаем в массив buttonElsNew - элемент buttonEl
        return buttonEl;
});

console.log('buttonElsNew - ', buttonElsNew);

// ----------------------------------------------------------------------------------------
// Добавляем в div расшаренный массив - с тегами кнопок
// ----------------------------------------------------------------------------------------
colorPickerContainerEl.append(...buttonElsNew);
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Вариант 2.1 - New School - Создание ФУНКЦИИ и Вызов
// ========================================================================================
// Так теперь делаются ВСЕ коллекции в JavaScript !!!
// Сначала фильтруется массив (filter), который поступает, а затем пропускается через map
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Создаем функцию
// ----------------------------------------------------------------------------------------
const makeColorPickerOptions = function (options) {
        // Возвращается результат работы метода map на массиве объектов
        return options.map(option => {
        // Создаем кнопки
        const buttonEl = document.createElement('button');
        buttonEl.type = 'button';
        buttonEl.textContent = option.label; // Надпись на кнопке
        buttonEl.classList.add('color-picker__option');  // Установка класса

        // Устанавливаем inline-style для кнопки (в теге CSS)
        buttonEl.style.color = 'black';
        buttonEl.style.backgroundColor = option.color;
        
        // Возвращаем в массив buttonElsNew - элемент buttonEl
        return buttonEl;
        });
}
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Вызов функции и присвоение переменной результатов работы функции
// ----------------------------------------------------------------------------------------
const buttonElsFunc = makeColorPickerOptions(colorPickerOptions);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Добавляем в div расшаренный массив - с тегами кнопок
// ----------------------------------------------------------------------------------------
colorPickerContainerEl.append(...buttonElsFunc);
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Пример.  Создание коллекции товаров
// ========================================================================================

// ========================================================================================
// Создаем объект - Карточка продукта
// ========================================================================================
const product = {
        name: 'Сервопривод',
        description: 'Сервопривод для управления вентиляцией',
        price: 2000,
        availabel: true,
        onSale: true,
};

// ----------------------------------------------------------------------------------------
// Разметка в HTML - шаблон для вывода карточки
// ----------------------------------------------------------------------------------------
//       <h2>Карточка продукта</h2>
//       <article class="product">
//         <h3 class="product__name">Имя</h3>
//         <p class="product__descr">Описание</p>
//         <p class="product__price">Цена</p>
//       </article>

// ----------------------------------------------------------------------------------------
// Создание карточки одного продукта
// ----------------------------------------------------------------------------------------
const productEl = document.createElement('article');
productEl.classList.add('product');

const nameProductEl = document.createElement('h3');
nameProductEl.classList.add('product__name');
nameProductEl.textContent = `Наименование - ${product.name}`;

const descrEl = document.createElement('p');
descrEl.classList.add('product__descr');
descrEl.textContent = `Описание - ${product.description}`;

const priceEl = document.createElement('p');
priceEl.classList.add('product__price');
priceEl.textContent = `Цена : ${product.price} грн.`;

productEl.append(nameProductEl, descrEl, priceEl);
console.log('productEl - ', productEl);

// Добавление карточки продукта в документ - сайт - в конец body
// document.body.append(productEl);
// ----------------------------------------------------------------------------------------


// ========================================================================================
// В файле  /data/products.js - хранится массив объектов - Карточки продуктов
// ========================================================================================

// ----------------------------------------------------------------------------------------
// Подключение данных из файла ../data/products.js
// и записsваются в переменную, которая стоит после слова import
// а сам файл  products.js - начинается с  export default, за которым сразу - массив объектов
// ----------------------------------------------------------------------------------------
import products from '../data/products.js';
console.log('products', products);

// ----------------------------------------------------------------------------------------
// Создаем функцию по созданию элемента - карточка элемента
// ----------------------------------------------------------------------------------------
const makeProductCard = (product) => {

        const productEl = document.createElement('article');
        productEl.classList.add('product');

        const nameProductEl = document.createElement('h3');
        nameProductEl.classList.add('product__name');
        nameProductEl.textContent = `Наименование - ${product.name}`;

        const descrEl = document.createElement('p');
        descrEl.classList.add('product__descr');
        descrEl.textContent = `Описание - ${product.description}`;

        const priceEl = document.createElement('p');
        priceEl.classList.add('product__price');
        priceEl.textContent = `Цена : ${product.price} грн.`;

        productEl.append(nameProductEl, descrEl, priceEl);
        console.log('productEl - ', productEl);

        return productEl;
};

// ----------------------------------------------------------------------------------------
// Вызов функции на одном продукте из массива - для проверки
// ----------------------------------------------------------------------------------------
console.log(makeProductCard(products[2]));
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Перебираем весь массив продуктов через map,
// а в качестве аргумента - передаем ТЕЛО функции
// ----------------------------------------------------------------------------------------
const productEls = products.map(makeProductCard);

console.log('productEls', productEls);

// ----------------------------------------------------------------------------------------
// Добавление всех элементов массива (распыленные элементы через ...) в документ - сайт
// ----------------------------------------------------------------------------------------

// Находим куда вставлять карточки
const productsContainerEl = document.querySelector('.js-product');

// Один раз вставляем все карточки в документ
productsContainerEl.append(...productEls);

// ----------------------------------------------------------------------------------------


// ========================================================================================
// Парс строк
// ========================================================================================
// textContent - возвращает весь текстовый контент без тегов, как текст
// ----------------------------------------------------------------------------------------
// innerHTML - возвращает всю вложенную разметку в виде одной строки
// ----------------------------------------------------------------------------------------
// innerHTML можно перезаписывать !
// Когда парсер браузера видит внутри innerHTML какие-то теги, он будет их создавать
// в DOM на странице !
// ----------------------------------------------------------------------------------------
// innerHTML - Плюсы
//  - Можно просто очистить контент тега       (имя_элемента.innerHTML='')
//  - быстро записать новое, удалив все старое
// ----------------------------------------------------------------------------------------
// innerHTML - Минусы
//  - для изменения контента, например с помощью оператора += для добавления элементов или контента
//    сначала браузер ВСЕ удаляет, а затем все создает заново
//    и это плохо для производительности
// ----------------------------------------------------------------------------------------

// Находим элемент по селектору класса
const titlePars = document.querySelector('.title-pars');

// Свойство элемента textContent
console.log(titlePars.textContent);     // Это заголовок

// Свойство элемента innerHTML
console.log(titlePars.innerHTML);       // Это <span>заголовок</span>

// Очистка содержания тега
titlePars.innerHTML = '';

// Изменение свойства элемента innerHTML
titlePars.innerHTML = 'Это наш <span><b>жирный</b> заголовок</span>';
console.log(titlePars.innerHTML); // Это наш <span><b>жирный</b> заголовок</span>



// ========================================================================================
// Метод element.insertAdjacentHTML(position, string)
// ========================================================================================
// Значения position :
// beforebegin - перед element
// afterbegin - внутрь element в самое начало контента
// beforeend - внутрь element в самый конец контента
// afterend - после element
// ----------------------------------------------------------------------------------------
// Этот метод не деструктивный, а только добавляет разметку к существующей
// ----------------------------------------------------------------------------------------

// Добавление тега ссылки вовнутрь тега c заголовком
titlePars.insertAdjacentHTML('afterbegin', ' <a href="">Ccылка</a>');

console.log(titlePars.innerHTML);
        //  <a href="">Ccылка</a>Это наш <span><b>жирный</b> заголовок</span>
// ----------------------------------------------------------------------------------------


// ========================================================================================
// Шаблонные строки
// ========================================================================================
// Пример - вывод на сайт таблицы транзакций
// ----------------------------------------------------------------------------------------
import transactionHistory from '../data/transactions.js';

console.log(transactionHistory);

// Шаблон для создания элементов данных таблицы
        // <tbody>
        //   <tr>
        //     <td>id</td>
        //     <td>Сумма</td>
        //     <td>Дата</td>
        //     <td>Кто</td>
        //     <td>Тип трансакции</td>
        //     <td>Имя счета</td>
        //     <td>Номер счета</td>
        //   </tr>
        // </tbody>

// ----------------------------------------------------------------------------------------
// Создание функции - разметки для tr и вложенных td - содержания таблицы
const makeTransactionTableRowMarkup = function (transaction) {

        // Деструктуризация в переменные из transaction
        const {
                id,
                amount,
                date,
                business,
                type,
                name,
                account,
        } = transaction;

        // Возврат шаблонной строки (которая в косых одинарных кавычках)
        return `
        <tr>
            <td>${transaction.id}</td>
            <td>${transaction.amount}</td>
            <td>${transaction.date}</td>
            <td>${transaction.business}</td>
            <td>${transaction.type}</td>
            <td>${transaction.name}</td>
            <td>${transaction.account}</td>
        </tr>
        `;
 };
// ----------------------------------------------------------------------------------------

// Результат обработки одного элемента базы данных
console.log(makeTransactionTableRowMarkup(transactionHistory[0]));

// ----------------------------------------------------------------------------------------
// Создание одной большой строки из базы данных
// Сначала метод map() возвращает массива строк,
// а затем метод join('') - соединяет все эти элементы массива строк в одну больщую строку
// ----------------------------------------------------------------------------------------
const transactionTableRowMarkup = transactionHistory
        .map(makeTransactionTableRowMarkup)
        .join('');

console.log(transactionTableRowMarkup);
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Находим в DOM ссылку на элемент, куда вставлять 
// ----------------------------------------------------------------------------------------
const tableEl = document.querySelector('.js-trans-table');
// ----------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// Вставляем в эту таблицу (перед закрывающим тегом - beforeend)
// ----------------------------------------------------------------------------------------
tableEl.insertAdjacentHTML('beforeend', transactionTableRowMarkup);
// ----------------------------------------------------------------------------------------


// Событие – это реакция браузера на какое-то действие пользователя
