// Модуль 2-2 - Функции

// Примеры из конспекта

// --------------------------------------------------------------------
// Объявление функции и объявление параметров x, y, z
function multiply(x, y, z) {
    console.log(`Результат умножения = ${x * y * z}`);
}

// --------------------------------------------------------------------
// Вызов функции и передача аргументов 
multiply(2, 3, 5); // Результат умножения = 30

// --------------------------------------------------------------------
// Объявление функции и объявление параметров x, y, z
function plus(x, y) {
    console.log(`Результат сложения = ${x + y}`);
    // Возвращение значения
    return x + y;
}

// --------------------------------------------------------------------
// Вызов функции,передача аргументов и присвоение результата переменной
let result = plus(2, 3); // 5
console.log(result);

// --------------------------------------------------------------------
// Параметры по умолчанию - указываются при объявлении функции
// Применяются, если не были указаны аргументы
// Нужно указывать, так как если не передаются в функцию аргументы, то - undefined.
function count(countFrom = 0, countTo = 10, step = 1) {
  console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);
  for (let i = countFrom; i <= countTo; i += step) {
    console.log(i);
  }
}
count(1, 5); // countFrom = 1, countTo = 5, step = 1
count(2,); // countFrom = 2, countTo = 10, step = 1
count(); // countFrom = 0, countTo = 10, step = 1

// --------------------------------------------------------------------
// Псевдомассив arguments
// Доступ к списку всех аргументов можно получить при помощи специальной
// переменной arguments, которая доступна только внутри функции
// и сохраняет все аргументы в качестве псевдомасива.
// Псевдомассив - коллекция со свойством length и
// возможностью обратиться к элементу по индексу. 
// Пример. Функция перемножения разного количества аргументов.
function multy() {
  let total = 1;
  for (const argument of arguments) {
    total *= argument;
  }
  return total;
}
console.log(multy(1, 2, 3)); //  6
console.log(multy(1, 2, 3, 4)); //  24

// --------------------------------------------------------------------
// Преобразование псевдомассива
// Зазвичай псевдомасив необхідно перетворити у повноцінний масив,
// оскільки у псевдомасиву відсутні методи масиву, наприклад slice() або includes().
// На практиці застосовують декілька основних способів.

// 1. Метод Array.from() 
//    который сделает массива из псевдомассива.
function fn1() {
  // Змінна args буде містити повноцінний масив
  const args = Array.from(arguments);
}

// 2. Oперацію ... (rest) 
//    вона дозволяє зібрати будь-яку кількість елементів,
//    у нашому випадку аргументів, в масив, і зберегти його в змінну. 
//    Збираємо всі аргументи,
//    використовуючи операцію rest безпосередньо в підписі функції.
function fn2(...args) {
  // Змінна args буде містити повноцінний масив
}

// Можно получать и фиксированный параметры, и массив из произвольного количества,
// Но массив должен быть последним в списке параметров функции

function fn3(name, bal, ...numbers) {
  // Переменная name будет содержать первый аргумент
  // Переменная bal будет содержать второй аргумент
  // Переменная numbers будет содержать полноценный массива аргументов, 
  // начиная с третьего....
  console.log(name);    // Саша
  console.log(bal);     // 2000
  console.log(numbers); // (4) [2, 3, 10, 50]
}

fn3('Саша', 2000, 2, 3, 10, 50);

// --------------------------------------------------------------------
// Патерн «Раннє повернення» 
// це спосіб використовувати можливість // дострокового повернення 
// з функції за допомогою оператора return.
// У функції може бути більше одного оператора return.
// Головне пам'ятати, що виконання функції переривається, коли інтерпретатор
// зустрічає повернення, і увесь код після нього буде проігнорований в
// поточному виконанні функції.

function withdraw(amount, balance) {
  // Якщо умова виконується, викликається console.log
  // і вихід із функції. Код після тіла if не виконається.
  if (amount === 0) {
    console.log("Для проведення операції введіть суму більшу за нуль");
    return;
  }

  // Якщо умова першого if не виконалась, його тіло пропускається
  // та інтерпретатор доходе до другого if.
  // Якщо умова виконується, викликається console.log і вихід із функції.
  // Код, що знаходиться після тіла if, не виконається.
  if (amount > balance) {
    console.log("Недостатньо коштів на рахунку");
    return;
  }

  // Якщо жоден із попередніх if не виконався,
  // інтерпретатор доходить до цього коду і виконує його.
  console.log("Операція зняття коштів проведена");
}

withdraw(0, 300); // "Для проведення операції введіть суму більшу за нуль"
withdraw(500, 300); // "Недостатньо коштів на рахунку"
withdraw(100, 300); // "Операція зняття коштів проведена"

// --------------------------------------------------------------------
// Функциональное выражение  (function expression) 
// Функциональное выражение - это обычное объявление переменной
// значением которй будет функция.
// Это альтернативный способ объявления функции.

// Объявление функции (function declaration)
function mul1(x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
}

// Функциональное выражение (function expression)
const mul2 = function (x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
};

// Різниця в тому, що функціональний вираз не можна викликати до місця його
//  створення, тільки після нього, тому що це буквально оголошення const
// змінної.

// ❌ Помилка! Не працює виклик до оголошення
// mul4(1, 2, 3);
const mul4 = function (x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
};
// ✅ Працює виклик після оголошення
mul4(4, 5, 6);

// A оголошення функції можна викликати до місця її створення в коді.
// ✅ Працює виклик до оголошення
mul3(1, 2, 3);
function mul3(x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
}
// ✅ Працює виклик після оголошення
mul3(4, 5, 6);

// --------------------------------------------------------------------

// ===================================================================
// Примеры из видео - Перевод в функции примеров из 2-1 (Массивы)
// ===================================================================

// --------------------------------------------------------------------
// Посчитать сумму чисел из массива
// --------------------------------------------------------------------
const calculateTotal = function (items) {
    let total = 0;
    for (const item of items) {
        total = total + item;
    }
    return total;
}
// Запись результата функции в переменную
const r1 = calculateTotal([1,3,5,6,7,8])
console.log('calculateTotal = ', r1);  // 30
// ********************************************************************

// --------------------------------------------------------------------
// Вывести в консоль построчно содержимое массива ( без  return )
// --------------------------------------------------------------------
const logItem = function (items) {
    for (const item of items) {
        console.log(item);
    }
}
logItem([1, 2, 3, 4, 5]);
logItem(['Сыр', 'Колбаса', 'Хлеб']);
// ********************************************************************

// --------------------------------------------------------------------
// Поиск логина
// --------------------------------------------------------------------
const findLogin = function (allLogins, loginToFind) {
    // Поиск через метод includes() и тернарный оператор
    const messageLogin = allLogins.includes(loginToFind)
         ? `Логин ${loginToFind} найден`
         : `Логин ${loginToFind} НЕ найден` ;

    // Сообщение  
    console.log(messageLogin);
}
const logins = ['12hghg', 'jhdsfjs', '1S5a', 'G6hf5'];
findLogin(logins, '1S5a');
findLogin(logins, '1S5435vva');

// ********************************************************************

// --------------------------------------------------------------------
// Пример. Поиск наименьшего числа
// --------------------------------------------------------------------
const findSmallestNumber = function (numbers) {
let smallestNumber = numbers[0];
// Линейный перебор массива
for (const number of numbers) {
  if (number < smallestNumber) {
    smallestNumber = number;
  }
  }
  return smallestNumber;
}
const numbersAll = [51, 21, 7, 45, 4, 56, 5, 90, 23];
const smallNumber = findSmallestNumber(numbersAll);
console.log(`Самое маленькое число в массиве - ${smallNumber}`);
// ********************************************************************

// --------------------------------------------------------------------
// Пример. Заменить регистр каждого символа в строке
// --------------------------------------------------------------------
const changeCase = function (strOld) {
  let strNew = '';
  // Разбиваем строку на символы
  const letters = strOld.split('');
// Цикл проверки по буквам по 2 варианту разбивки - Вариант с тернарным оператором
for (let letter of letters) {
    // Переменная проверки буквы на нижний регистр 
  const isInLowerCase = letter === letter.toLowerCase();
    // Тернарный оператор присвоения строки
  strNew += isInLowerCase
  ? letter = letter.toUpperCase()
  : letter = letter.toLowerCase();
  }

  return strNew;
}

const strStart = 'Java-Script';
const strEnd = changeCase(strStart);
console.log('Начальная строка - ', strStart);
console.log('Конечная строка - ', strEnd);
// ********************************************************************

// --------------------------------------------------------------------
// Пример. Посчитать сумму всех аргументов
// --------------------------------------------------------------------
// В функцию передается произвольное количество аргументов
const sumNumbers = function (...numbers) {
  let total = 0;
  for (const number of numbers) {
    total += number;
  }
  return total;
}
console.log(sumNumbers(1, 2, 3, 4, 5)); // 15
console.log(sumNumbers(100, 200));     // 300
// ********************************************************************

// --------------------------------------------------------------------
// Пример. Включить в новый массив только те аргументы,
// которые входят в первый аргумент - передаваемый массив
// --------------------------------------------------------------------
const filterNumber = function (array, ...numbers) {
  let arrayNew = [];
  for (const number of numbers) {
    if (array.includes(number)) {
      arrayNew.push(number);
    }
  }
  return arrayNew;
}
console.log(filterNumber([1,2,3,5],1,5,6,3,10)) // [1, 5, 3]
// ********************************************************************